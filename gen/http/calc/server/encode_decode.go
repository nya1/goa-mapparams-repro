// Code generated by goa v3.7.2, DO NOT EDIT.
//
// calc HTTP server encoders and decoders
//
// Command:
// $ goa gen calcsvc/design

package server

import (
	"context"
	"net/http"
	"strconv"
	"strings"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeMultiplyResponse returns an encoder for responses returned by the calc
// multiply endpoint.
func EncodeMultiplyResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(int)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeMultiplyRequest returns a decoder for requests sent to the calc
// multiply endpoint.
func DecodeMultiplyRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			type_    *int
			metadata map[string]string
			err      error
		)
		{
			type_Raw := r.URL.Query().Get("type")
			if type_Raw != "" {
				v, err2 := strconv.ParseInt(type_Raw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("type_", type_Raw, "integer"))
				}
				pv := int(v)
				type_ = &pv
			}
		}
		{
			metadataRaw := r.URL.Query()
			if len(metadataRaw) != 0 {
				for keyRaw, valRaw := range metadataRaw {
					if strings.HasPrefix(keyRaw, "metadata[") {
						if metadata == nil {
							metadata = make(map[string]string)
						}
						var keya string
						{
							openIdx := strings.IndexRune(keyRaw, '[')
							closeIdx := strings.IndexRune(keyRaw, ']')
							keya = keyRaw[openIdx+1 : closeIdx]
						}
						metadata[keya] = valRaw[0]
					}
				}
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewMultiplyPayload(type_, metadata)

		return payload, nil
	}
}
